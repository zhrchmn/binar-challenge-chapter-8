{
  "swagger": "2.0",
  "info": {
    "description": "binar challenge 8",
    "version": "1.0.0",
    "title": "challenge8",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "ganasbuaya@gmail.com"
    },
    "license": {
      "name": "postgres",
      "url": "https://www.postgresql.org"
    }
  },
  "host": "localhost:4000",
  "basePath": "/api",
  "tags": [
    {
      "name": "Player",
      "description": "player details"
    }
  ],
  "schemes": [
    "http",
    "https"
  ],
  "paths": {
    "/players": {
      "get": {
        "tags": [
          "Player"
        ],
        "summary": "player list",
        "description": "list all player in database",
        "parameters": [
          {
            "in": "query",
            "name": "username",
            "description": "get username player",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "email",
            "description": "get mail player",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "password",
            "description": "get password player",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "experience",
            "description": "get experience player",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "Lvl",
            "description": "get Lvl player",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "succes",
            "schema": {
              "$ref": "#/definitions/Player"
            }
          }
        }
      },
      "post": {
        "tags": [
          "player"
        ],
        "summary": "create new player",
        "description": "create new player",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "create new player to database",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Player"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "succes",
            "schema": {
              "$ref": "#/definitions/Player"
            }
          },
          "400": {
            "description": "username or email cannot empty"
          }
        }
      }
    },
    "/players/{id}": {
      "get": {
        "tags": [
          "Player"
        ],
        "summary": "Finds Player by id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "search player id to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "Player was updated successfully",
            "schema": {
              "$ref": "#/definitions/Player"
            }
          },
          "500": {
            "description": "Error updating Player with id={id}"
          }
        }
      },
      "put": {
        "tags": [
          "player"
        ],
        "summary": "update player data",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of player return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully update"
          },
          "500": {
            "description": "failed to update"
          }
        }
      },
      "delete": {
        "tags": [
          "player"
        ],
        "summary": "delete player with id",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of player to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "player was deleted"
          },
          "400": {
            "description": "Cannot delete Player"
          }
        }
      }
    },
    "/Players/exp/{id}": {
      "post": {
        "tags": [
          "player"
        ],
        "summary": "add player exp",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "player id",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "experience",
            "description": "player experience",
            "required": true,
            "schema": {
              "$ref": "#/definitions/exp"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Player with id = ${id} gain ${exp} experience."
          },
          "400": {
            "description": "Cannot update Player with id=${id}!"
          }
        }
      }
    }
  },
  "definitions": {
    "Players": {
      "type": "object",
      "required": [
        "username",
        "password",
        "email"
      ],
      "properties": {
        "username": {
          "type": "string",
          "example": "tester"
        },
        "email": {
          "type": "string",
          "example": "test@mail.com"
        },
        "password": {
          "type": "string",
          "example": 12345
        },
        "experience": {
          "type": "integer",
          "example": 99
        },
        "lvl": {
          "type": "integer",
          "example": 99
        }
      }
    },
    "exp": {
      "type": "object",
      "properties": {
        "exp": {
          "type": "integer",
          "format": "int64"
        }
      }
    }
  }
}